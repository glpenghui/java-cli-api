#summary How to use the CLI API to build a CLI application.

= Introduction =

This Wiki covers how to use the CLI API to create a custom CLI application.


= Steps =

  * Add the cli-api as a dependency to your project.
  * Make sure the main class of your final jar specifies _com.ballew.tools.cli.api.EntryPoint_.
  * Create your implementation of the CommandLineApplication class. This should be a class that extends CommandLineApplication, and the class must be annotated with @CLIEntry.
  * Add the _cli.properties_ file. If using Maven, this can go under src/main/resources. Otherwise, just make sure it ends up being at the root of your final built JAR. This properties file should contain *base_package=com.ballew.samples.cli.client*. The package name should be changed to the package that contains your CLIEntry annotated class.
    * Note that this properties file is optional (well, it should be. See below bullet). If not specified, all classes will be scanned to find it, so providing this file makes it faster in the case that you have a large number of classes.
        * Double note (a note within a note!): While this ideally would be optional, this functionality is currently bugged and not functional (it has trouble finding the class when it's inside of the built JAR).
  * Optionally create your own CLIContext implementation. This can be handy if you want to make it easy to store known objects (see the sample client's use of the SampleCLIContext).
    * If you are using a custom context, your @CLIEntry class MUST override _createContext()_ to return it! Also, your commands MUST specify the same context type (or a superclass of it). This is explained below.
  * Create your commands. Ideally, this all go in the same package (or at least its own hierarchy of packages). Each command should extend Command, and the generics on Command MUST match the context type (or a superclass of) that you specified in your _createContext()_.
* Happy coding!